// server/src/routes/media.routes.js
import { Router } from 'express';
import multer from 'multer';
import fs from 'fs';
import path from 'path';

import { authRequired, roleRequired } from '../middleware/auth.js';
import { pool } from '../db/pool.js';

const router = Router();

// –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
const IMAGES_ROOT = path.join(process.cwd(), 'public', 'images');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
function ensureDir(p) {
  fs.mkdirSync(p, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞ (covers –∏–ª–∏ screens)
function resolveSubfolder(folder) {
  const map = { covers: 'covers', screens: 'screens' };
  return map[folder] || 'screens'; // –í–µ—Ä–Ω–µ–º "screens" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function sanitizeFilename(originalName) {
  const ext = path.extname(originalName).toLowerCase();
  const name = path.basename(originalName, ext);

  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
  const safeName = name
    .replace(/[^\w\s-]/g, '') // —É–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, '-') // –ø—Ä–æ–±–µ–ª—ã –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –¥–µ—Ñ–∏—Å
    .replace(/-+/g, '-') // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –Ω–∞ –æ–¥–∏–Ω
    .toLowerCase()
    .substring(0, 100); // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã

  return `${safeName}${ext}`;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination(req, file, cb) {
    const subfolder = resolveSubfolder(req.query.folder || req.body.folder);
    const dest = path.join(IMAGES_ROOT, subfolder);

    console.log('üìÅ Creating directory:', dest);
    ensureDir(dest);

    cb(null, dest);
  },
  filename(req, file, cb) {
    const safeName = sanitizeFilename(file.originalname);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    const subfolder = resolveSubfolder(req.query.folder || req.body.folder);
    const dest = path.join(IMAGES_ROOT, subfolder);
    let finalName = safeName;
    let counter = 1;

    // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
    while (fs.existsSync(path.join(dest, finalName))) {
      const ext = path.extname(safeName);
      const nameWithoutExt = path.basename(safeName, ext);
      finalName = `${nameWithoutExt}-${counter}${ext}`;
      counter++;
    }

    console.log('üíæ Saving file as:', finalName);
    cb(null, finalName);
  }
});

const upload = multer({
  storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB –º–∞–∫—Å
  },
  fileFilter(req, file, cb) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const allowedMimes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    if (allowedMimes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG, PNG, GIF, WebP)'));
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL —Ñ–∞–π–ª–∞
function fileUrl(req, relPath) {
  return `${req.protocol}://${req.get('host')}${relPath}`.replace(/\\/g, '/');
}

/**
 * –†–æ—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (covers –∏–ª–∏ screens)
 * POST /api/media/upload?folder=covers|screens
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: form-data: file
 * –û—Ç–¥–∞—ë—Ç: { url, rel }
 */
router.post(
  '/upload',
  authRequired,
  roleRequired('admin'),
  upload.single('file'),
  async (req, res) => {
    if (!req.file) {
      return res.status(400).json({ error: 'file is required' });
    }

    const subfolder = resolveSubfolder(req.query.folder || req.body.folder); // covers –∏–ª–∏ screens
    const rel = `/images/${subfolder}/${req.file.filename}`; // –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ public
    const fullUrl = fileUrl(req, rel);

    console.log('‚úÖ File uploaded:', {
      original: req.file.originalname,
      saved: req.file.filename,
      path: req.file.path,
      url: fullUrl
    });

    return res.status(201).json({ url: fullUrl, rel });
  }
);


/**
 * –†–æ—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –∏–≥—Ä—ã
 * POST /api/media/games/:id/cover   form-data: file
 */
router.post(
  '/games/:id/cover',
  authRequired,
  roleRequired('admin'),
  upload.single('file'),
  async (req, res, next) => {
    try {
      if (!req.file) {
        return res.status(400).json({ error: 'file is required' });
      }

      const rel = `/images/covers/${req.file.filename}`;
      const url = fileUrl(req, rel);

      // –û–±–Ω–æ–≤–ª—è–µ–º URL –æ–±–ª–æ–∂–∫–∏ –∏–≥—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await pool.query(`UPDATE games SET cover_url=$2, updated_at=now() WHERE id=$1`, [
        req.params.id,
        url
      ]);

      console.log('‚úÖ Cover updated for game:', req.params.id, url);

      res.status(201).json({ url, rel });
    } catch (e) {
      console.error('‚ùå Cover upload error:', e);
      next(e);
    }
  }
);

/**
 * –†–æ—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã
 * POST /api/media/games/:id/screenshots   form-data: files[]
 */
router.post(
  '/games/:id/screenshots',
  authRequired,
  roleRequired('admin'),
  upload.array('files', 10),
  async (req, res, next) => {
    try {
      const id = req.params.id;
      const { rows } = await pool.query('SELECT screenshots FROM games WHERE id=$1', [id]);
      const current = Array.isArray(rows[0]?.screenshots) ? rows[0].screenshots : [];
      const start = current.length;

      const added = (req.files || []).map((f, i) => {
        const rel = `/images/screens/${f.filename}`;
        return { alt: '', url: fileUrl(req, rel), order: start + i };
      });

      const nextArr = current.concat(added);
      await pool.query('UPDATE games SET screenshots=$2::jsonb, updated_at=now() WHERE id=$1', [
        id,
        JSON.stringify(nextArr)
      ]);

      console.log('‚úÖ Screenshots added for game:', id, added.length);

      res.status(201).json({ items: added });
    } catch (e) {
      console.error('‚ùå Screenshots upload error:', e);
      next(e);
    }
  }
);

export default router;
